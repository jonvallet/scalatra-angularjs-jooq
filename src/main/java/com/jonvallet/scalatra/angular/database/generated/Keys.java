/**
 * This class is generated by jOOQ
 */
package com.jonvallet.scalatra.angular.database.generated;


import com.jonvallet.scalatra.angular.database.generated.tables.SchemaVersion;
import com.jonvallet.scalatra.angular.database.generated.tables.Todo;
import com.jonvallet.scalatra.angular.database.generated.tables.records.SchemaVersionRecord;
import com.jonvallet.scalatra.angular.database.generated.tables.records.TodoRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>PUBLIC</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<TodoRecord, Integer> IDENTITY_TODO = Identities0.IDENTITY_TODO;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
	public static final UniqueKey<TodoRecord> CONSTRAINT_2 = UniqueKeys0.CONSTRAINT_2;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<TodoRecord, Integer> IDENTITY_TODO = createIdentity(Todo.TODO, Todo.TODO.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = createUniqueKey(SchemaVersion.SCHEMA_VERSION, SchemaVersion.SCHEMA_VERSION.VERSION);
		public static final UniqueKey<TodoRecord> CONSTRAINT_2 = createUniqueKey(Todo.TODO, Todo.TODO.ID);
	}
}
